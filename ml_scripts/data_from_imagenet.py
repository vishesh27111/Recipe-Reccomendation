# -*- coding: utf-8 -*-
"""Data_from_Imagenet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18fmmPEmSwsorpLTjcHqEAYEUlrSNEcHO
"""

from google.colab import drive
drive.mount('/content/drive')

from bs4 import BeautifulSoup
import requests
from urllib.request import urlopen
import os
wnid1 = input().split()
# os.mkdir(f'/content/drive/MyDrive/csv')
for wnid in wnid1:
  url = f"https://image-net.org/api/imagenet.synset.geturls.getmapping?wnid={wnid}"
  html = urlopen(url).read()
  soup = BeautifulSoup(html)
  for script in soup(["pre"]):
    script.decompose()
  strips = list(soup.stripped_strings)
  for l in strips:
    lines = l.split("\n")
  for i in lines:
    i = i.split(' ')
    with open(f'/content/drive/MyDrive/csv/{wnid}.csv', 'a') as f:
      f.write(i[0]+','+i[1]+'\n')

import os
csv = sorted(os.listdir('/content/drive/MyDrive/csv/'))
os.mkdir(f'/content/drive/MyDrive/csv/images/')

c1 = 0
for c in csv:
  if c.endswith('.csv'):
    c1 = c.rstrip('.csv')
    os.mkdir(f'/content/drive/MyDrive/csv/images/{c1}')
    os.chdir(f'/content/drive/MyDrive/csv/images/{c1}')
    with open(f'/content/drive/MyDrive/csv/{c}', 'r') as f:
      lines = f.readlines()
      print(lines)
      for i in lines:
        i = i.split(',')
        i[1] = i[1].rstrip('\n') 
        print(i[1])
        try:
          img = requests.get(i[1], timeout = 10)
        except:
          continue
        with open(f'{i[0]}.jpg', 'wb') as f:
          f.write(img.content)
  #         if c1 == 20000:
  #           break
  # c1 += 1

index = input()
def convert(size, box):
    dw = 1./(size[1])
    dh = 1./(size[0])
    x = (int(box[0]) + int(box[2]))/2.0 
    y = (int(box[1]) + int(box[3]))/2.0 
    w = int(box[2]) - int(box[0])
    h = int(box[3]) - int(box[1])
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return f'{index} ' +  str(x) + ' ' + str(y) + ' ' + str(w) + ' ' + str(h)

import pandas as pd
import cv2
import os
csv = pd.read_csv('/content/drive/MyDrive/LOC_train_solution.csv')

csv = pd.DataFrame(csv)
classes = sorted(os.listdir('/content/drive/MyDrive/csv/images/'))

os.mkdir('/content/drive/MyDrive/csv/labels/')
print(classes)

for class_ in classes:
  imgs = sorted(os.listdir(f'/content/drive/MyDrive/csv/images/{class_}'))
  for i in imgs:
    i = i.rstrip('.jpg')
    try:
      var = csv['PredictionString'][list(csv['ImageId']).index(f'{i}')]
    except:
      os.remove(f'/content/drive/MyDrive/csv/images/{class_}/{i}.jpg')
      continue
    var = var.split(' ')
    try:
      img = cv2.imread(f'/content/drive/MyDrive/csv/images/{class_}/{i}.jpg')
      size = list(img.shape)
    except:
      os.remove(f'/content/drive/MyDrive/csv/images/{class_}/{i}.jpg')
      continue
    
    if len(var) <= 5:
      box = var[1:5]
      con = convert(size, box)
      with open(f'/content/drive/MyDrive/csv/labels/{i}.txt', 'a') as f:
        f.write(con)
    else:
      no_box = var.count(i)
      c = 6
      box =  var[1:5]
      with open(f'/content/drive/MyDrive/csv/labels/{i}.txt', 'a') as f:
          con = convert(size, box)
          f.write(con + '\n')
      for temp in range(1, no_box-1):
        box =  var[c + 1 : c + 5]
        with open(f'/content/drive/MyDrive/csv/labels/{i}.txt', 'a') as f:
          con = convert(size, box)
          f.write(con + '\n')
        c += 6

!rm -rf /content/drive/MyDrive/csv/images

# %matplotlib inline
# import matplotlib.pyplot as plt
# img = cv2.imread('/content/drive/MyDrive/csv/images/n12144580/n12144580_1107.jpg')
# width = img.shape[1]
# height = img.shape[0]
# center_x = int(0.4876760563380282 * width)
# center_y = int(0.4642857142857143 * height)
# w = int(0.9542253521126761 * width)
# h = int(0.9285714285714286 * height)

# # Rectangle coordinates
# x = int(center_x - w / 2)
# y = int(center_y - h / 2)

# cv2.rectangle(img, (x, y), (x + w, y + h), (255,0,0), 2)
# plt.imshow(img)
# plt.show()

